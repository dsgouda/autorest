// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Workspace.
    /// </summary>
    public static partial class WorkspaceExtensions
    {
            /// <summary>
            /// request to list project-wide symbols matching the query string.
            /// </summary>
            /// <remarks>
            /// request to list project-wide symbols matching the query string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSymbolParams'>
            /// a non empty query string
            /// </param>
            public static object Symbol(this IWorkspace operations, string workspaceSymbolParams = default(string))
            {
                return operations.SymbolAsync(workspaceSymbolParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to list project-wide symbols matching the query string.
            /// </summary>
            /// <remarks>
            /// request to list project-wide symbols matching the query string.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workspaceSymbolParams'>
            /// a non empty query string
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SymbolAsync(this IWorkspace operations, string workspaceSymbolParams = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SymbolWithHttpMessagesAsync(workspaceSymbolParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

