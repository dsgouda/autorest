// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LanguageServerProtocol.
    /// </summary>
    public static partial class LanguageServerProtocolExtensions
    {
            /// <summary>
            /// Initialize the connection
            /// </summary>
            /// <remarks>
            /// Initialize the connection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='initParams'>
            /// parameters to initialize server comm
            /// </param>
            public static object Initialize(this ILanguageServerProtocol operations, InitializeParams initParams)
            {
                return operations.InitializeAsync(initParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initialize the connection
            /// </summary>
            /// <remarks>
            /// Initialize the connection
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='initParams'>
            /// parameters to initialize server comm
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InitializeAsync(this ILanguageServerProtocol operations, InitializeParams initParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitializeWithHttpMessagesAsync(initParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// asks the server to shut down, but to not exit
            /// </summary>
            /// <remarks>
            /// request server to shutdown
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Shutdown(this ILanguageServerProtocol operations)
            {
                operations.ShutdownAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// asks the server to shut down, but to not exit
            /// </summary>
            /// <remarks>
            /// request server to shutdown
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ShutdownAsync(this ILanguageServerProtocol operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ShutdownWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// request server to shutdown
            /// </summary>
            /// <remarks>
            /// notification to ask the server to exit its process
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Exit(this ILanguageServerProtocol operations)
            {
                operations.ExitAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// request server to shutdown
            /// </summary>
            /// <remarks>
            /// notification to ask the server to exit its process
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExitAsync(this ILanguageServerProtocol operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ExitWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification sent from the client to the server after the client is fully
            /// initialized
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server after the client is fully
            /// initialized
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void Initialized(this ILanguageServerProtocol operations)
            {
                operations.InitializedAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification sent from the client to the server after the client is fully
            /// initialized
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server after the client is fully
            /// initialized
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task InitializedAsync(this ILanguageServerProtocol operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.InitializedWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification signal newly opened text documents
            /// </summary>
            /// <remarks>
            /// notification signal newly opened text documents
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocument'>
            /// The document that was opened.
            /// </param>
            public static void DidOpenTextDocument(this ILanguageServerProtocol operations, TextDocumentItem textDocument = default(TextDocumentItem))
            {
                operations.DidOpenTextDocumentAsync(textDocument).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification signal newly opened text documents
            /// </summary>
            /// <remarks>
            /// notification signal newly opened text documents
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocument'>
            /// The document that was opened.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidOpenTextDocumentAsync(this ILanguageServerProtocol operations, TextDocumentItem textDocument = default(TextDocumentItem), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidOpenTextDocumentWithHttpMessagesAsync(textDocument, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification signal the change of configuration settings.
            /// </summary>
            /// <remarks>
            /// notifitication signal the change of configuration settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='settings'>
            /// The document that was opened.
            /// </param>
            public static void DidChangeConfiguration(this ILanguageServerProtocol operations, string settings)
            {
                operations.DidChangeConfigurationAsync(settings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification signal the change of configuration settings.
            /// </summary>
            /// <remarks>
            /// notifitication signal the change of configuration settings.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='settings'>
            /// The document that was opened.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidChangeConfigurationAsync(this ILanguageServerProtocol operations, string settings, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidChangeConfigurationWithHttpMessagesAsync(settings, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification signal changes to a text document
            /// </summary>
            /// <remarks>
            /// notification signal changes to a text document
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didChangeTextDocumentParams'>
            /// OK
            /// </param>
            public static void DidChange(this ILanguageServerProtocol operations, DidChangeTextDocumentParams didChangeTextDocumentParams = default(DidChangeTextDocumentParams))
            {
                operations.DidChangeAsync(didChangeTextDocumentParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification signal changes to a text document
            /// </summary>
            /// <remarks>
            /// notification signal changes to a text document
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didChangeTextDocumentParams'>
            /// OK
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidChangeAsync(this ILanguageServerProtocol operations, DidChangeTextDocumentParams didChangeTextDocumentParams = default(DidChangeTextDocumentParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidChangeWithHttpMessagesAsync(didChangeTextDocumentParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// will save notification is sent from the client to the server before the
            /// document is actually saved
            /// </summary>
            /// <remarks>
            /// will save notification is sent from the client to the server before the
            /// document is actually saved
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='willSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            public static void WillSave(this ILanguageServerProtocol operations, WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams))
            {
                operations.WillSaveAsync(willSaveTextDocumentParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// will save notification is sent from the client to the server before the
            /// document is actually saved
            /// </summary>
            /// <remarks>
            /// will save notification is sent from the client to the server before the
            /// document is actually saved
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='willSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task WillSaveAsync(this ILanguageServerProtocol operations, WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.WillSaveWithHttpMessagesAsync(willSaveTextDocumentParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// save request is sent from the client to the server before the document is
            /// actually saved. return an array of TextEdits which will be applied to the
            /// text document before it is saved
            /// </summary>
            /// <remarks>
            /// save request is sent from the client to the server before the document is
            /// actually saved. return an array of TextEdits which will be applied to the
            /// text document before it is saved
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='willSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            public static object WillSaveWaitUntil(this ILanguageServerProtocol operations, WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams))
            {
                return operations.WillSaveWaitUntilAsync(willSaveTextDocumentParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// save request is sent from the client to the server before the document is
            /// actually saved. return an array of TextEdits which will be applied to the
            /// text document before it is saved
            /// </summary>
            /// <remarks>
            /// save request is sent from the client to the server before the document is
            /// actually saved. return an array of TextEdits which will be applied to the
            /// text document before it is saved
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='willSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> WillSaveWaitUntilAsync(this ILanguageServerProtocol operations, WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WillSaveWaitUntilWithHttpMessagesAsync(willSaveTextDocumentParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// notification is sent from the client to the server when the document was
            /// saved in the client
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the document was saved
            /// in the client
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            public static void DidSave(this ILanguageServerProtocol operations, DidSaveTextDocumentParams didSaveTextDocumentParams = default(DidSaveTextDocumentParams))
            {
                operations.DidSaveAsync(didSaveTextDocumentParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification is sent from the client to the server when the document was
            /// saved in the client
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the document was saved
            /// in the client
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didSaveTextDocumentParams'>
            /// the document save params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidSaveAsync(this ILanguageServerProtocol operations, DidSaveTextDocumentParams didSaveTextDocumentParams = default(DidSaveTextDocumentParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidSaveWithHttpMessagesAsync(didSaveTextDocumentParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification sent from the client to the server when the document got
            /// closed in the client.
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the document got
            /// closed in the client.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didCloseTextDocumentParams'>
            /// the document closed params
            /// </param>
            public static void DidClose(this ILanguageServerProtocol operations, DidCloseTextDocumentParamsModel didCloseTextDocumentParams = default(DidCloseTextDocumentParamsModel))
            {
                operations.DidCloseAsync(didCloseTextDocumentParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification sent from the client to the server when the document got
            /// closed in the client.
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the document got
            /// closed in the client.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didCloseTextDocumentParams'>
            /// the document closed params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidCloseAsync(this ILanguageServerProtocol operations, DidCloseTextDocumentParamsModel didCloseTextDocumentParams = default(DidCloseTextDocumentParamsModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidCloseWithHttpMessagesAsync(didCloseTextDocumentParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// notification sent from the client to the server when the client detects
            /// changes to files watched by the language client.
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the client detects
            /// changes to files watched by the language client.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didChangeWatchedFilesParams'>
            /// the document closed params
            /// </param>
            public static void DidChangeWatchedFiles(this ILanguageServerProtocol operations, IList<FileEvent> didChangeWatchedFilesParams = default(IList<FileEvent>))
            {
                operations.DidChangeWatchedFilesAsync(didChangeWatchedFilesParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// notification sent from the client to the server when the client detects
            /// changes to files watched by the language client.
            /// </summary>
            /// <remarks>
            /// notification sent from the client to the server when the client detects
            /// changes to files watched by the language client.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='didChangeWatchedFilesParams'>
            /// the document closed params
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DidChangeWatchedFilesAsync(this ILanguageServerProtocol operations, IList<FileEvent> didChangeWatchedFilesParams = default(IList<FileEvent>), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DidChangeWatchedFilesWithHttpMessagesAsync(didChangeWatchedFilesParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// request sent to compute completion items at a given cursor position.
            /// </summary>
            /// <remarks>
            /// request sent to compute completion items at a given cursor position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// </param>
            public static object Completion(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams))
            {
                return operations.CompletionAsync(textDocumentPositionParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request sent to compute completion items at a given cursor position.
            /// </summary>
            /// <remarks>
            /// request sent to compute completion items at a given cursor position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CompletionAsync(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompletionWithHttpMessagesAsync(textDocumentPositionParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to resolve additional information for a given completion item.
            /// </summary>
            /// <remarks>
            /// request to resolve additional information for a given completion item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='completionItem'>
            /// the completion item to resolve
            /// </param>
            public static object Resolve(this ILanguageServerProtocol operations, CompletionItem completionItem = default(CompletionItem))
            {
                return operations.ResolveAsync(completionItem).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to resolve additional information for a given completion item.
            /// </summary>
            /// <remarks>
            /// request to resolve additional information for a given completion item.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='completionItem'>
            /// the completion item to resolve
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResolveAsync(this ILanguageServerProtocol operations, CompletionItem completionItem = default(CompletionItem), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResolveWithHttpMessagesAsync(completionItem, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request hover information at a given text document position.
            /// </summary>
            /// <remarks>
            /// request hover information at a given text document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            public static object HoverMethod(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams))
            {
                return operations.HoverMethodAsync(textDocumentPositionParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request hover information at a given text document position.
            /// </summary>
            /// <remarks>
            /// request hover information at a given text document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> HoverMethodAsync(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HoverMethodWithHttpMessagesAsync(textDocumentPositionParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request signature information at a given cursor position
            /// </summary>
            /// <remarks>
            /// request signature information at a given cursor position
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            public static object SignatureHelpMethod(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams))
            {
                return operations.SignatureHelpMethodAsync(textDocumentPositionParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request signature information at a given cursor position
            /// </summary>
            /// <remarks>
            /// request signature information at a given cursor position
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SignatureHelpMethodAsync(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SignatureHelpMethodWithHttpMessagesAsync(textDocumentPositionParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to resolve the definition location of a symbol at a given text
            /// document position.
            /// </summary>
            /// <remarks>
            /// request to resolve the definition location of a symbol at a given text
            /// document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            public static object Definition(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams))
            {
                return operations.DefinitionAsync(textDocumentPositionParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to resolve the definition location of a symbol at a given text
            /// document position.
            /// </summary>
            /// <remarks>
            /// request to resolve the definition location of a symbol at a given text
            /// document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DefinitionAsync(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DefinitionWithHttpMessagesAsync(textDocumentPositionParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to  resolve project-wide references for the symbol denoted by the
            /// given text document position.
            /// </summary>
            /// <remarks>
            /// request to resolve project-wide references for the symbol denoted by the
            /// given text document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceParams'>
            /// Position within the text document.
            /// </param>
            public static object References(this ILanguageServerProtocol operations, ReferenceParams referenceParams = default(ReferenceParams))
            {
                return operations.ReferencesAsync(referenceParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to  resolve project-wide references for the symbol denoted by the
            /// given text document position.
            /// </summary>
            /// <remarks>
            /// request to resolve project-wide references for the symbol denoted by the
            /// given text document position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReferencesAsync(this ILanguageServerProtocol operations, ReferenceParams referenceParams = default(ReferenceParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReferencesWithHttpMessagesAsync(referenceParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to resolve a document highlights for a given text document
            /// position.
            /// </summary>
            /// <remarks>
            /// request to resolve a document highlights for a given text document
            /// position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            public static object DocumentHighlightMethod(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams))
            {
                return operations.DocumentHighlightMethodAsync(textDocumentPositionParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to resolve a document highlights for a given text document
            /// position.
            /// </summary>
            /// <remarks>
            /// request to resolve a document highlights for a given text document
            /// position.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='textDocumentPositionParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DocumentHighlightMethodAsync(this ILanguageServerProtocol operations, TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DocumentHighlightMethodWithHttpMessagesAsync(textDocumentPositionParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to list all symbols found in a given text document.
            /// </summary>
            /// <remarks>
            /// request to list all symbols found in a given text document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentSymbolParams'>
            /// Position within the text document.
            /// </param>
            public static object DocumentSymbol(this ILanguageServerProtocol operations, DocumentSymbolParams documentSymbolParams = default(DocumentSymbolParams))
            {
                return operations.DocumentSymbolAsync(documentSymbolParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to list all symbols found in a given text document.
            /// </summary>
            /// <remarks>
            /// request to list all symbols found in a given text document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentSymbolParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DocumentSymbolAsync(this ILanguageServerProtocol operations, DocumentSymbolParams documentSymbolParams = default(DocumentSymbolParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DocumentSymbolWithHttpMessagesAsync(documentSymbolParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to compute code lenses for a given text document.
            /// </summary>
            /// <remarks>
            /// request to compute code lenses for a given text document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeLensParams'>
            /// Position within the text document.
            /// </param>
            public static object CodeLensMethod(this ILanguageServerProtocol operations, TextDocumentIdentifier codeLensParams = default(TextDocumentIdentifier))
            {
                return operations.CodeLensMethodAsync(codeLensParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to compute code lenses for a given text document.
            /// </summary>
            /// <remarks>
            /// request to compute code lenses for a given text document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeLensParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CodeLensMethodAsync(this ILanguageServerProtocol operations, TextDocumentIdentifier codeLensParams = default(TextDocumentIdentifier), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CodeLensMethodWithHttpMessagesAsync(codeLensParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to the server to request the location of links in a document.
            /// </summary>
            /// <remarks>
            /// request to the server to request the location of links in a document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentLinkParams'>
            /// Position within the text document.
            /// </param>
            public static object DocumentLinkMethod(this ILanguageServerProtocol operations, DocumentLinkParams documentLinkParams = default(DocumentLinkParams))
            {
                return operations.DocumentLinkMethodAsync(documentLinkParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to the server to request the location of links in a document.
            /// </summary>
            /// <remarks>
            /// request to the server to request the location of links in a document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentLinkParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DocumentLinkMethodAsync(this ILanguageServerProtocol operations, DocumentLinkParams documentLinkParams = default(DocumentLinkParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DocumentLinkMethodWithHttpMessagesAsync(documentLinkParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to format a whole document.
            /// </summary>
            /// <remarks>
            /// request to format a whole document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentFormattingParams'>
            /// Position within the text document.
            /// </param>
            public static object Formatting(this ILanguageServerProtocol operations, DocumentFormattingParams documentFormattingParams = default(DocumentFormattingParams))
            {
                return operations.FormattingAsync(documentFormattingParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to format a whole document.
            /// </summary>
            /// <remarks>
            /// request to format a whole document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentFormattingParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FormattingAsync(this ILanguageServerProtocol operations, DocumentFormattingParams documentFormattingParams = default(DocumentFormattingParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FormattingWithHttpMessagesAsync(documentFormattingParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to format range in document.
            /// </summary>
            /// <remarks>
            /// request to format range in document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentRangeFormattingParams'>
            /// Position within the text document.
            /// </param>
            public static object RangeFormatting(this ILanguageServerProtocol operations, DocumentRangeFormattingParams documentRangeFormattingParams = default(DocumentRangeFormattingParams))
            {
                return operations.RangeFormattingAsync(documentRangeFormattingParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to format range in document.
            /// </summary>
            /// <remarks>
            /// request to format range in document.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentRangeFormattingParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RangeFormattingAsync(this ILanguageServerProtocol operations, DocumentRangeFormattingParams documentRangeFormattingParams = default(DocumentRangeFormattingParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RangeFormattingWithHttpMessagesAsync(documentRangeFormattingParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to format parts of the document during typing.
            /// </summary>
            /// <remarks>
            /// request to format parts of the document during typing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentOnTypeFormattingParams'>
            /// Position within the text document.
            /// </param>
            public static object OnTypeFormatting(this ILanguageServerProtocol operations, DocumentOnTypeFormattingParams documentOnTypeFormattingParams = default(DocumentOnTypeFormattingParams))
            {
                return operations.OnTypeFormattingAsync(documentOnTypeFormattingParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to format parts of the document during typing.
            /// </summary>
            /// <remarks>
            /// request to format parts of the document during typing.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='documentOnTypeFormattingParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OnTypeFormattingAsync(this ILanguageServerProtocol operations, DocumentOnTypeFormattingParams documentOnTypeFormattingParams = default(DocumentOnTypeFormattingParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OnTypeFormattingWithHttpMessagesAsync(documentOnTypeFormattingParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to perform a workspace-wide rename of a symbol.
            /// </summary>
            /// <remarks>
            /// request to perform a workspace-wide rename of a symbol.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameParams'>
            /// Position within the text document.
            /// </param>
            public static object Rename(this ILanguageServerProtocol operations, RenameParams renameParams = default(RenameParams))
            {
                return operations.RenameAsync(renameParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to perform a workspace-wide rename of a symbol.
            /// </summary>
            /// <remarks>
            /// request to perform a workspace-wide rename of a symbol.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='renameParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RenameAsync(this ILanguageServerProtocol operations, RenameParams renameParams = default(RenameParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenameWithHttpMessagesAsync(renameParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// request to trigger command execution
            /// </summary>
            /// <remarks>
            /// request to trigger command execution
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executeCommandParams'>
            /// Position within the text document.
            /// </param>
            public static object ExecuteCommand(this ILanguageServerProtocol operations, ExecuteCommandParams executeCommandParams = default(ExecuteCommandParams))
            {
                return operations.ExecuteCommandAsync(executeCommandParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// request to trigger command execution
            /// </summary>
            /// <remarks>
            /// request to trigger command execution
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executeCommandParams'>
            /// Position within the text document.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExecuteCommandAsync(this ILanguageServerProtocol operations, ExecuteCommandParams executeCommandParams = default(ExecuteCommandParams), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteCommandWithHttpMessagesAsync(executeCommandParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

