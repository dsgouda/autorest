// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface ILanguageServerProtocol : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Gets the IWorkspace.
        /// </summary>
        IWorkspace Workspace { get; }

        /// <summary>
        /// Gets the ITextDocument.
        /// </summary>
        ITextDocument TextDocument { get; }

        /// <summary>
        /// Gets the ICodeLensOperations.
        /// </summary>
        ICodeLensOperations CodeLens { get; }

        /// <summary>
        /// Initialize the connection
        /// </summary>
        /// <remarks>
        /// Initialize the connection
        /// </remarks>
        /// <param name='initParams'>
        /// parameters to initialize server comm
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> InitializeWithHttpMessagesAsync(InitializeParams initParams, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// asks the server to shut down, but to not exit
        /// </summary>
        /// <remarks>
        /// request server to shutdown
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ShutdownWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request server to shutdown
        /// </summary>
        /// <remarks>
        /// notification to ask the server to exit its process
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExitWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification sent from the client to the server after the client is
        /// fully initialized
        /// </summary>
        /// <remarks>
        /// notification sent from the client to the server after the client is
        /// fully initialized
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> InitializedWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification signal newly opened text documents
        /// </summary>
        /// <remarks>
        /// notification signal newly opened text documents
        /// </remarks>
        /// <param name='textDocument'>
        /// The document that was opened.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidOpenTextDocumentWithHttpMessagesAsync(TextDocumentItem textDocument = default(TextDocumentItem), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification signal the change of configuration settings.
        /// </summary>
        /// <remarks>
        /// notifitication signal the change of configuration settings.
        /// </remarks>
        /// <param name='settings'>
        /// The document that was opened.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidChangeConfigurationWithHttpMessagesAsync(string settings, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification signal changes to a text document
        /// </summary>
        /// <remarks>
        /// notification signal changes to a text document
        /// </remarks>
        /// <param name='didChangeTextDocumentParams'>
        /// OK
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidChangeWithHttpMessagesAsync(DidChangeTextDocumentParams didChangeTextDocumentParams = default(DidChangeTextDocumentParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// will save notification is sent from the client to the server before
        /// the document is actually saved
        /// </summary>
        /// <remarks>
        /// will save notification is sent from the client to the server before
        /// the document is actually saved
        /// </remarks>
        /// <param name='willSaveTextDocumentParams'>
        /// the document save params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> WillSaveWithHttpMessagesAsync(WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// save request is sent from the client to the server before the
        /// document is actually saved. return an array of TextEdits which will
        /// be applied to the text document before it is saved
        /// </summary>
        /// <remarks>
        /// save request is sent from the client to the server before the
        /// document is actually saved. return an array of TextEdits which will
        /// be applied to the text document before it is saved
        /// </remarks>
        /// <param name='willSaveTextDocumentParams'>
        /// the document save params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> WillSaveWaitUntilWithHttpMessagesAsync(WillSaveTextDocumentParams willSaveTextDocumentParams = default(WillSaveTextDocumentParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification is sent from the client to the server when the
        /// document was saved in the client
        /// </summary>
        /// <remarks>
        /// notification sent from the client to the server when the document
        /// was saved in the client
        /// </remarks>
        /// <param name='didSaveTextDocumentParams'>
        /// the document save params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidSaveWithHttpMessagesAsync(DidSaveTextDocumentParams didSaveTextDocumentParams = default(DidSaveTextDocumentParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification sent from the client to the server when the document
        /// got closed in the client.
        /// </summary>
        /// <remarks>
        /// notification sent from the client to the server when the document
        /// got closed in the client.
        /// </remarks>
        /// <param name='didCloseTextDocumentParams'>
        /// the document closed params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidCloseWithHttpMessagesAsync(DidCloseTextDocumentParamsModel didCloseTextDocumentParams = default(DidCloseTextDocumentParamsModel), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// notification sent from the client to the server when the client
        /// detects changes to files watched by the language client.
        /// </summary>
        /// <remarks>
        /// notification sent from the client to the server when the client
        /// detects changes to files watched by the language client.
        /// </remarks>
        /// <param name='didChangeWatchedFilesParams'>
        /// the document closed params
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DidChangeWatchedFilesWithHttpMessagesAsync(IList<FileEvent> didChangeWatchedFilesParams = default(IList<FileEvent>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request sent to compute completion items at a given cursor
        /// position.
        /// </summary>
        /// <remarks>
        /// request sent to compute completion items at a given cursor
        /// position.
        /// </remarks>
        /// <param name='textDocumentPositionParams'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CompletionWithHttpMessagesAsync(TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to resolve additional information for a given completion
        /// item.
        /// </summary>
        /// <remarks>
        /// request to resolve additional information for a given completion
        /// item.
        /// </remarks>
        /// <param name='completionItem'>
        /// the completion item to resolve
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ResolveWithHttpMessagesAsync(CompletionItem completionItem = default(CompletionItem), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request hover information at a given text document position.
        /// </summary>
        /// <remarks>
        /// request hover information at a given text document position.
        /// </remarks>
        /// <param name='textDocumentPositionParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> HoverMethodWithHttpMessagesAsync(TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request signature information at a given cursor position
        /// </summary>
        /// <remarks>
        /// request signature information at a given cursor position
        /// </remarks>
        /// <param name='textDocumentPositionParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SignatureHelpMethodWithHttpMessagesAsync(TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to resolve the definition location of a symbol at a given
        /// text document position.
        /// </summary>
        /// <remarks>
        /// request to resolve the definition location of a symbol at a given
        /// text document position.
        /// </remarks>
        /// <param name='textDocumentPositionParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DefinitionWithHttpMessagesAsync(TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to  resolve project-wide references for the symbol denoted
        /// by the given text document position.
        /// </summary>
        /// <remarks>
        /// request to resolve project-wide references for the symbol denoted
        /// by the given text document position.
        /// </remarks>
        /// <param name='referenceParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ReferencesWithHttpMessagesAsync(ReferenceParams referenceParams = default(ReferenceParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to resolve a document highlights for a given text document
        /// position.
        /// </summary>
        /// <remarks>
        /// request to resolve a document highlights for a given text document
        /// position.
        /// </remarks>
        /// <param name='textDocumentPositionParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DocumentHighlightMethodWithHttpMessagesAsync(TextDocumentPositionParams textDocumentPositionParams = default(TextDocumentPositionParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to list all symbols found in a given text document.
        /// </summary>
        /// <remarks>
        /// request to list all symbols found in a given text document.
        /// </remarks>
        /// <param name='documentSymbolParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DocumentSymbolWithHttpMessagesAsync(DocumentSymbolParams documentSymbolParams = default(DocumentSymbolParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to compute code lenses for a given text document.
        /// </summary>
        /// <remarks>
        /// request to compute code lenses for a given text document.
        /// </remarks>
        /// <param name='codeLensParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CodeLensMethodWithHttpMessagesAsync(TextDocumentIdentifier codeLensParams = default(TextDocumentIdentifier), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to the server to request the location of links in a
        /// document.
        /// </summary>
        /// <remarks>
        /// request to the server to request the location of links in a
        /// document.
        /// </remarks>
        /// <param name='documentLinkParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> DocumentLinkMethodWithHttpMessagesAsync(DocumentLinkParams documentLinkParams = default(DocumentLinkParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to format a whole document.
        /// </summary>
        /// <remarks>
        /// request to format a whole document.
        /// </remarks>
        /// <param name='documentFormattingParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> FormattingWithHttpMessagesAsync(DocumentFormattingParams documentFormattingParams = default(DocumentFormattingParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to format range in document.
        /// </summary>
        /// <remarks>
        /// request to format range in document.
        /// </remarks>
        /// <param name='documentRangeFormattingParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RangeFormattingWithHttpMessagesAsync(DocumentRangeFormattingParams documentRangeFormattingParams = default(DocumentRangeFormattingParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to format parts of the document during typing.
        /// </summary>
        /// <remarks>
        /// request to format parts of the document during typing.
        /// </remarks>
        /// <param name='documentOnTypeFormattingParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> OnTypeFormattingWithHttpMessagesAsync(DocumentOnTypeFormattingParams documentOnTypeFormattingParams = default(DocumentOnTypeFormattingParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to perform a workspace-wide rename of a symbol.
        /// </summary>
        /// <remarks>
        /// request to perform a workspace-wide rename of a symbol.
        /// </remarks>
        /// <param name='renameParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> RenameWithHttpMessagesAsync(RenameParams renameParams = default(RenameParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// request to trigger command execution
        /// </summary>
        /// <remarks>
        /// request to trigger command execution
        /// </remarks>
        /// <param name='executeCommandParams'>
        /// Position within the text document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> ExecuteCommandWithHttpMessagesAsync(ExecuteCommandParams executeCommandParams = default(ExecuteCommandParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}

