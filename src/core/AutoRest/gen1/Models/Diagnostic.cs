// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents a diagnostic, such as a compiler error or warning.
    /// </summary>
    public partial class Diagnostic
    {
        /// <summary>
        /// Initializes a new instance of the Diagnostic class.
        /// </summary>
        public Diagnostic() { }

        /// <summary>
        /// Initializes a new instance of the Diagnostic class.
        /// </summary>
        /// <param name="severity">The diagnostic's severity. Can be omitted.
        /// If omitted it is up to the client to interpret diagnostics as
        /// error, warning, info or hint.</param>
        /// <param name="code">The diagnostic's code. Can be omitted.</param>
        /// <param name="source">A human-readable string describing the source
        /// of this diagnostic, e.g. 'typescript' or 'super lint'.</param>
        /// <param name="message">The diagnostic's message.</param>
        public Diagnostic(Range range = default(Range), int? severity = default(int?), int? code = default(int?), string source = default(string), string message = default(string))
        {
            Range = range;
            Severity = severity;
            Code = code;
            Source = source;
            Message = message;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "range")]
        public Range Range { get; set; }

        /// <summary>
        /// Gets or sets the diagnostic's severity. Can be omitted. If omitted
        /// it is up to the client to interpret diagnostics as error, warning,
        /// info or hint.
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public int? Severity { get; set; }

        /// <summary>
        /// Gets or sets the diagnostic's code. Can be omitted.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public int? Code { get; set; }

        /// <summary>
        /// Gets or sets a human-readable string describing the source of this
        /// diagnostic, e.g. 'typescript' or 'super lint'.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the diagnostic's message.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

    }
}

