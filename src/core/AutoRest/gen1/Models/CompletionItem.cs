// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// a completion item
    /// </summary>
    public partial class CompletionItem
    {
        /// <summary>
        /// Initializes a new instance of the CompletionItem class.
        /// </summary>
        public CompletionItem() { }

        /// <summary>
        /// Initializes a new instance of the CompletionItem class.
        /// </summary>
        /// <param name="label">The label of this completion item. By default
        /// also the text that is inserted when selecting this
        /// completion.</param>
        /// <param name="kind">The kind of this completion item. Based of the
        /// kind an icon is chosen by the editor.</param>
        /// <param name="detail">A human-readable string with additional
        /// information about this item, like type or symbol
        /// information.</param>
        /// <param name="documentation"> A human-readable string that
        /// represents a doc-comment.</param>
        /// <param name="sortText">A string that shoud be used when comparing
        /// this item with other items. When `falsy` the label is used.</param>
        /// <param name="filterText">A string that should be used when
        /// filtering a set of completion items. When `falsy` the label is
        /// used.</param>
        /// <param name="insertText">A string that should be inserted a
        /// document when selecting this completion. When `falsy` the label is
        /// used.</param>
        /// <param name="insertTextFormat">The format of the insert text. The
        /// format applies to both the `insertText` property and the `newText`
        /// property of a provided `textEdit`.</param>
        /// <param name="additionalTextEdits"> An optional array of additional
        /// text edits that are applied when selecting this completion. Edits
        /// must not overlap with the main edit nor with themselves.</param>
        /// <param name="data">An data entry field that is preserved on a
        /// completion item between a completion and a completion resolve
        /// request.</param>
        public CompletionItem(string label = default(string), int? kind = default(int?), string detail = default(string), string documentation = default(string), string sortText = default(string), string filterText = default(string), string insertText = default(string), int? insertTextFormat = default(int?), TextEdit textEdit = default(TextEdit), IList<TextEdit> additionalTextEdits = default(IList<TextEdit>), Command command = default(Command), object data = default(object))
        {
            Label = label;
            Kind = kind;
            Detail = detail;
            Documentation = documentation;
            SortText = sortText;
            FilterText = filterText;
            InsertText = insertText;
            InsertTextFormat = insertTextFormat;
            TextEdit = textEdit;
            AdditionalTextEdits = additionalTextEdits;
            Command = command;
            Data = data;
        }

        /// <summary>
        /// Gets or sets the label of this completion item. By default also the
        /// text that is inserted when selecting this completion.
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the kind of this completion item. Based of the kind an
        /// icon is chosen by the editor.
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public int? Kind { get; set; }

        /// <summary>
        /// Gets or sets a human-readable string with additional information
        /// about this item, like type or symbol information.
        /// </summary>
        [JsonProperty(PropertyName = "detail")]
        public string Detail { get; set; }

        /// <summary>
        /// Gets or sets  A human-readable string that represents a
        /// doc-comment.
        /// </summary>
        [JsonProperty(PropertyName = "documentation")]
        public string Documentation { get; set; }

        /// <summary>
        /// Gets or sets a string that shoud be used when comparing this item
        /// with other items. When `falsy` the label is used.
        /// </summary>
        [JsonProperty(PropertyName = "sortText")]
        public string SortText { get; set; }

        /// <summary>
        /// Gets or sets a string that should be used when filtering a set of
        /// completion items. When `falsy` the label is used.
        /// </summary>
        [JsonProperty(PropertyName = "filterText")]
        public string FilterText { get; set; }

        /// <summary>
        /// Gets or sets a string that should be inserted a document when
        /// selecting this completion. When `falsy` the label is used.
        /// </summary>
        [JsonProperty(PropertyName = "insertText")]
        public string InsertText { get; set; }

        /// <summary>
        /// Gets or sets the format of the insert text. The format applies to
        /// both the `insertText` property and the `newText` property of a
        /// provided `textEdit`.
        /// </summary>
        [JsonProperty(PropertyName = "insertTextFormat")]
        public int? InsertTextFormat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "textEdit")]
        public TextEdit TextEdit { get; set; }

        /// <summary>
        /// Gets or sets  An optional array of additional text edits that are
        /// applied when selecting this completion. Edits must not overlap with
        /// the main edit nor with themselves.
        /// </summary>
        [JsonProperty(PropertyName = "additionalTextEdits")]
        public IList<TextEdit> AdditionalTextEdits { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "command")]
        public Command Command { get; set; }

        /// <summary>
        /// Gets or sets an data entry field that is preserved on a completion
        /// item between a completion and a completion resolve request.
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public object Data { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InsertTextFormat > 2)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "InsertTextFormat", 2);
            }
            if (InsertTextFormat < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "InsertTextFormat", 1);
            }
        }
    }
}

