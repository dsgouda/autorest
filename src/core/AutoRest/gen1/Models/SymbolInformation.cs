// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientToServer.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents information about programming constructs like variables,
    /// classes, interfaces etc.
    /// </summary>
    public partial class SymbolInformation
    {
        /// <summary>
        /// Initializes a new instance of the SymbolInformation class.
        /// </summary>
        public SymbolInformation() { }

        /// <summary>
        /// Initializes a new instance of the SymbolInformation class.
        /// </summary>
        /// <param name="name">The name of this symbol.</param>
        /// <param name="kind">SymbolKind enum export const File = 1, Module =
        /// 2, Namespace = 3, Package = 4, Class = 5, Method = 6, Property = 7,
        /// Field = 8, Constructor = 9, Enum = 10, Interface = 11, Function =
        /// 12, Variable = 13, Constant = 14, String = 15, Number = 16, Boolean
        /// = 17, Array = 18</param>
        /// <param name="containerName">The name of the symbol containing this
        /// symbol.</param>
        public SymbolInformation(string name = default(string), int? kind = default(int?), Location location = default(Location), string containerName = default(string))
        {
            Name = name;
            Kind = kind;
            Location = location;
            ContainerName = containerName;
        }

        /// <summary>
        /// Gets or sets the name of this symbol.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets symbolKind enum export const File = 1, Module = 2,
        /// Namespace = 3, Package = 4, Class = 5, Method = 6, Property = 7,
        /// Field = 8, Constructor = 9, Enum = 10, Interface = 11, Function =
        /// 12, Variable = 13, Constant = 14, String = 15, Number = 16, Boolean
        /// = 17, Array = 18
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public int? Kind { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or sets the name of the symbol containing this symbol.
        /// </summary>
        [JsonProperty(PropertyName = "containerName")]
        public string ContainerName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Kind > 18)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Kind", 18);
            }
            if (Kind < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Kind", 1);
            }
        }
    }
}

