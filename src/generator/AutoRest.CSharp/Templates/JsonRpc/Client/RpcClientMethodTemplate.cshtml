@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp
@using AutoRest.CSharp.Model
@inherits AutoRest.Core.Template<AutoRest.CSharp.Model.MethodCs>

@if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
/// <param name='cancellationToken'>
/// The cancellation token.
/// </param>
@if (Model.Parameters.Cast<ParameterCs>().Any(p => !p.IsConstant && p.IsRequired && p.IsNullable()))
{
@:/// <exception cref="Microsoft.Rest.ValidationException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
}
@if (Model.Deprecated)
{
@:[System.Obsolete()]
}
@{ 
    var retType = (Model.TaskExtensionReturnTypeString.StartsWith("Task")) ? Model.TaskExtensionReturnTypeString : Model.ReturnTypeString;
    retType = (retType == "void") ? string.Empty : "<" + retType + ">";
}
public async System.Threading.Tasks.Task@(retType) @(Model.Name)Async(@(Model.GetAsyncMethodParameterDeclaration(false)))
{
    @foreach (ParameterCs parameter in Model.Parameters.Where(p => !p.IsConstant))
    {
        if (parameter.IsRequired && parameter.IsNullable())
        {
    @:if (@(parameter.Name) == null)
    @:{
        @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "@(parameter.Name)");
    @:}
@:
        }
        if(parameter.CanBeValidated  && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {
    @:@(parameter.ModelType.ValidateType(Model, parameter.Name, parameter.Constraints))
        }
    }

    @foreach (ParameterCs parameter in Model.Parameters)
    {
        if (parameter.IsConstant && !parameter.IsClientProperty)
        {
    @:@(parameter.ModelTypeName) @(parameter.Name) = @(parameter.DefaultValue);
        }

        if (parameter.ModelType is CompositeType
            && !parameter.IsConstant
            && parameter.IsRequired
            && !parameter.IsClientProperty
            && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
        {
    @:if (@(parameter.Name) == null)
    @:{
    @:    @(parameter.Name) = new @(parameter.ModelTypeName)();
    @:}
        }
    }
    cancellationToken.ThrowIfCancellationRequested();
    
    // construct a json array of args for the Request() call
    JArray args = new JArray();
    @foreach(var par in Model.LocalParameters)
    {
    @:args.Add(@par.Name);
    }

    @if (retType == string.Empty)
    {
    @:await RpcClient.ServerConnection.Notify@(retType)("@Model.Url", args.ToString(), cancellationToken);
    }
    else
    {
    @:return RpcClient.ServerConnection.Request@(retType)("@Model.Url", args.ToString(), cancellationToken);
    }

}
